{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Instr/index.js","components/Container/index.js","components/DinoCard/index.js","components/Play/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","score","highScore","Footer","Instr","Container","children","DinoCard","onClick","dinoClicked","id","alt","name","src","image","Play","state","dinos","shuffleDinos","input","sort","Math","random","resetGame","data","resetData","map","Object","objectSpread","clicked","_this","correctGuess","newData","dino","currentDino","handleCorrectGuess","handleIncorrectGuess","newHighScore","currentScore","currentHighScore","newScore","result","setState","this","_this2","components_Header","components_Instr","components_Container","components_DinoCard","key","components_Footer","React","Component","App","components_Play","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0331e7dd.chunk.js","sourcesContent":["//This is going to be the sticky header to show the title and keep score\n//**May need to break this down more to handle the changing score\n//**This may also need to be a class is score = state\n//\nimport React from \"react\";\nimport \"./header.css\";\n\n\nfunction Header(props) {\n  return (\n    <nav className=\"navbar fixed-top d-flex justify-content-between navbar-light\">\n      <h2><a className=\"navbar-brand\" href=\"/\">Click-a-saurus</a></h2>\n      <h2>Score: {props.score} | High Score: {props.highScore}</h2>\n    </nav>\n  );\n};\n\nexport default Header;","//This is going to be the component to render the footer at the bottom of the page.\n//\nimport React from \"react\";\nimport \"./footer.css\";\n\n\nfunction Footer(props) {\n  return (\n    <footer>\n      <h5 className=\"pageFooter\">Click-a-saurus Â© 2018</h5>\n    </footer>\n  );\n};\n\n\nexport default Footer;","//This will render the instruction area on the top of the page\n//\nimport React from \"react\";\nimport \"./instr.css\";\n\n\nfunction Instr() {\n  return (\n    // <div className=\"container\">\n      // <div className=\"row\">\n        <div className=\"instructArea w-100 my-5 text-center\">\n          <h2 className=\"instructText\">Click an image to earn points, but click each image only once.</h2>\n        </div>\n      // </div>\n    // </div>\n  );\n};\n\n\nexport default Instr;","import React from \"react\";\nimport \"./container.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","//This will be the component to hold the images\n//\nimport React from \"react\";\nimport \"./dinocard.css\";\n\nfunction DinoCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.dinoClicked(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default DinoCard;\n","//This is the main game area which will likely have most of the logic and pulls everything together\n//**It will manage state so it will need to be a class.\n//\nimport React from \"react\";\nimport \"./play.css\";\nimport dinos from \"../../data.json\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport Instr from \"../Instr\";\nimport Container from \"../Container\";\nimport DinoCard from \"../DinoCard\";\n\nclass Play extends React.Component {\n  state = {\n    dinos,\n    score: 0,\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ \n      dinos: this.shuffleDinos(this.state.dinos),\n      score: 0,\n      highScore: 0 \n    });\n  }\n\n  //Shuffle the array  -  https://stackoverflow.com/questions/49555273/how-to-shuffle-an-array-of-objects-in-javascript\n  shuffleDinos = (input) => {\n    const newDinoOrder = input.sort(() => Math.random() - 0.5);\n    return newDinoOrder;\n  };\n\n\n  resetGame = data => {\n    const resetData = data.map(data => ({ ...data, clicked: false }));\n    return this.shuffleDinos(resetData);\n  };\n\n\n  dinoClicked = id => {\n    let correctGuess = false;\n    // console.log(\"id = \" + id);\n    // console.log(\"index = \" + this.state.dinos.indexOf(id));\n\n    // const newData = this.state.data.map(item => {\n    //   const newItem = { ...item };\n\n    //Cycle through the dinos looking for a match to id of the one clicked on\n    const newData = this.state.dinos.map(dino => {\n      const currentDino = { ...dino };\n      if (currentDino.id === id) {\n        //Check to see if this dino has been clicked on before\n        if (!currentDino.clicked) {\n          // console.log(\"this dino matched: \" + currentDino.id);\n          // console.log(\"clicked = \" + currentDino.clicked);\n          correctGuess = true;\n          currentDino.clicked = true;\n          // console.log(\"***currentScore = \" + currentScore);\n          // console.log(\"***currentHighScore = \" + currentHighScore);\n          // console.log(\"currentDino = \" + JSON.stringify(currentDino));\n        }\n      };\n      // }; \n      return currentDino;\n    });\n    if(correctGuess) {\n      // console.log(\"correct\");\n      this.handleCorrectGuess(newData);\n    } else {\n      // console.log(\"incorrect\");\n      this.handleIncorrectGuess(newData);\n    }\n  };\n\n  handleCorrectGuess = (input) => {\n    let newHighScore;\n    const currentScore = this.state.score;\n    const currentHighScore = this.state.highScore;\n    // console.log(\"***currentScore = \" + currentScore);\n    // console.log(\"***currentHighScore = \" + currentHighScore);\n    // console.log(JSON.stringify(input));\n\n    const newScore = currentScore + 1;\n\n    if (currentScore >= currentHighScore) {\n      newHighScore = currentScore + 1;\n      // console.log(\"greater \" + newHighScore);\n    } else {\n      newHighScore = currentHighScore;\n      // console.log(\"lesser \" + newHighScore);\n    };\n    // const newHighScore = score > this.highscore ? score : highScore;\n\n    let result = this.shuffleDinos(input);\n\n    // console.log(\"newScore = \" + newScore);\n    // console.log(\"newHighScore = \" + newHighScore);\n    // console.log(JSON.stringify(result));\n\n    this.setState({\n      dinos: result,\n      score: newScore,\n      highScore: newHighScore\n    });\n  };\n\n\n  handleIncorrectGuess = (input) => {\n    this.setState({\n      dinos: this.resetGame(input),\n      score: 0\n    });\n  };\n\n\n  render() {\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <Instr />\n        <Container>\n          {this.state.dinos.map(dino => (\n            <DinoCard\n              key={dino.id}\n              id={dino.id}\n              clicked={dino.clicked}\n              name={dino.name}\n              image={dino.image}\n              dinoClicked={this.dinoClicked}\n            />\n          ))};\n          </Container>\n          <Footer />\n      </div>\n    );\n  };\n};\n\nexport default Play;","import React from \"react\";\nimport Play from \"./components/Play\";\n\n\nfunction App() {\n  return <Play />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}